package smart.home.security.view;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import smart.home.security.model.Device;
import smart.home.security.model.Devices;
import smart.home.security.utilities.DevicesMacAddressModel;


/**
 * Show the list of the avaliable devices to be added. This view scans all the
 * IP addresses available to determine all the devices that can be added. This
 * view filters out all the devices that are not eligible to added. Devices that
 * have already been added and devices that are not raspberry pi's will be
 * filtered out.
 * @author archana
 */
public class AvailableDevicesPanel extends javax.swing.JPanel {

    /**
     * Hold the device details keyed by MAC address with IP address values.
     */
    Map<String, String> deviceDetails;

    /**
     * The constructor to show the available devices panel.
     */
    public AvailableDevicesPanel() {
        // Initailize the components necessary to show all the available devices.
        initComponents();
        
        // Execute the device address scanner. This spawns off many threads so
        // the main thread can continue.
        new DeviceAddressScanner().execute();

        // Update the table view to display that the devices are being scanned.
        Set<String> loading = new HashSet();
        loading.add("Scanning for devices...");

        // Set the available devices table view model to indicated the scanning.
        DefaultTableModel model = DevicesMacAddressModel.defaultTableModel(loading);
        availableMacAddressTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")   
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        availableMacAddressTable = new javax.swing.JTable();
        nextButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Available Devices"));
        setPreferredSize(new java.awt.Dimension(397, 311));

        availableMacAddressTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Device Mac Address"
            }
        ));
        jScrollPane2.setViewportView(availableMacAddressTable);

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(cancelButton))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The next button action performed. Navigate to the next view in the add
     * device work flow.
     * @param evt - The button action event. 
     */
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // Get the selected row from the available devies table view.
        int selectedIndex = availableMacAddressTable.getSelectedRow();
        
        // Validate the selected index.
        if (selectedIndex >= 0) {
            // Parse the MAC address from the selected row.
            String mac = (String) availableMacAddressTable.getValueAt(selectedIndex, 0);
            // Get the IP address based on the MAC from the map lookup.
            String ip = deviceDetails.get(mac);
            // Navigate to the Add device view with the MAC and IP Address.
            getSmartHomeSecurityFrame().replaceFramePanel(new AddDevicePanel(mac, ip));
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    /**
     * Redirects to the smart home security page when cancel button is pressed.
     * @param evt - The button click action event.
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // Navigate back to the main panel when cancel is pressed.
        getSmartHomeSecurityFrame().replaceFramePanel(new MainPanel());
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Helper to get the smart home security frame. 
     * @return the SmartHomeSecurityFrame of this component.
     */
    private SmartHomeSecurityFrame getSmartHomeSecurityFrame() {
        return (SmartHomeSecurityFrame) SwingUtilities.getWindowAncestor(this);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable availableMacAddressTable;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextButton;
    // End of variables declaration//GEN-END:variables

    /**
     * An inner class to help facilitate device MAC address scanning.
     */
    private class DeviceAddressScanner extends SwingWorker {

        /**
         * Find all the available devices then filter out the ineligible devices.
         * @return 1 if the scanning is successful otherwise throws an exception.
         * @throws Exception 
         */
        @Override
        protected Object doInBackground() throws Exception {
            // Find all the potential devices addresses.
            findAvailableDevices();
            // Scan for the valid device addresses.
            scanDevices();
            // Filter out the ineligible addresses.
            filterDevices();
            return 1;
        }

        /**
         * After the scanning is complete update the table view with the device
         * details.
         */
        @Override
        protected void done() {
            // Create the table model with the MAC addresses.
            DefaultTableModel model = DevicesMacAddressModel.defaultTableModel(deviceDetails.keySet());
            // Set the default table model on the table view.
            availableMacAddressTable.setModel(model);
            // Force the table view to layout.
            availableMacAddressTable.doLayout();
        }

        /**
         * Scans the ARP table for all the available devices and updates the
         * device details.
         */
        private void scanDevices() {
            // Create a new map to hold the device details.
            deviceDetails = new HashMap();
            try {
                // Create a scanner that will scan the results of the arp table.
                Scanner s = new Scanner(Runtime.getRuntime().exec("arp -a").getInputStream()).useDelimiter("\n");
                // Iterate through each token of the arp table.
                while (s.hasNext()) {
                    // Get the next token from the scanner.
                    String token = s.next();
                    // Parse the token to get the (IP-MAC) address.
                    String replace = token.substring(0, token.indexOf(" on")).replace("? (", "").replace(") at ", "-");
                    // Split the IP and the MAC address into their own entries.
                    String[] deviceInfo = replace.split("-");
                    // Filter out the ineligible devices.
                    if (deviceInfo[1].startsWith("b8:27:eb")) {
                        // Add the devices in the device details.
                        deviceDetails.put(deviceInfo[1], deviceInfo[0]);
                    }                    
                }
            } catch (IOException ex) {
                // Log an exection if the scanner fails.
                Logger.getLogger(AvailableDevicesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        /**
         * Finds the potential set of IP addresses for the devices.
         * @return the list of IP address strings.
         */
        private List<String> findAvailableDevices() {
            // Create an empty array list.
            List<String> ips = new ArrayList();
            try {
                // Find the current subnet of the network.
                String subnet = getSubnet();
                // Create an executor service with 100 threads.
                ExecutorService executorService = Executors.newFixedThreadPool(100);
                
                // Create an callable tasks to be invoked in the future.
                List<Callable<String>> callableTasks = new ArrayList<>();
                // Iterate through all possible IP candidates.
                for (int i = 1; i < 255; i++) {
                    // Append the subnet with the host candidate.
                    String host = subnet + i;
                    // Create the callable that returns the IP address if reachable.
                    Callable<String> callableTask = () -> {
                        // Attempt to ping the host address with a timeout.
                        return InetAddress.getByName(host).isReachable(1000) ? host : null;
                    };
                    // Add the callable task to the list of callables.
                    callableTasks.add(callableTask);
                }
                
                // Create a list of futures that will invoke the callable taskes.
                List<Future<String>> futures = executorService.invokeAll(callableTasks);

                // Iterate through each of the futures.
                for (Future future : futures) {
                    // Get the IP of this future.
                    String ip = (String) future.get();
                    // Validate the IP address is not nul.
                    if (ip != null) {
                        // Add the IP address to the list of IP addresses.
                        ips.add(ip);
                    }
                }
                
                // Gracefully shutdown the executor service.
                executorService.shutdown();
            } catch (InterruptedException | ExecutionException ex) {
                // Log an exception if throw.
                Logger.getLogger(AvailableDevicesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return ips;
        }

        /**
         * Get the subnet of the current device.
         * @return the String subnet of the current device.
         */
        private String getSubnet() {
            // Initialize the subnet string.
            String subnet = null;
            try {
                // Find the local Inet address.
                InetAddress ipAddr = InetAddress.getLocalHost();
                // Get the host address of the local host.
                String ip = ipAddr.getHostAddress();
                // Find the subnet by truncation the last entry.
                subnet = ip.substring(0, ip.lastIndexOf('.') + 1);
            } catch (UnknownHostException ex) {
                // Log the exception throw.
                Logger.getLogger(AvailableDevicesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return subnet;
        }
        
        /**
         * Filter all the devices that have already been added.
         */
        private void filterDevices() {
            // Iterate through all the devices.
            for (Device device : Devices.getInstance().getDevices()) {
                // Remove the device from the device details if it in the devices.
                deviceDetails.remove(device.getMacAddress());
            }
        }    
    }
}
