package smart.home.security.view;

import java.awt.BorderLayout;
import java.awt.Component;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import smart.home.security.model.Notifications;
import smart.home.security.utilities.DeviceManager;
import smart.home.security.utilities.DeviceSocketManager;

/**
 * The starting point of the application. The frame that hosts all the application
 * work flows and view.
 * @author archana
 */
public class SmartHomeSecurityFrame extends javax.swing.JFrame {

    /**
     * The singleton instance of the frame.
     */
    private static SmartHomeSecurityFrame frame;
    
    /**
     * The current component visible on the frame.
     */
    private static Component currentComponent;
    
    /**
     * The constructor to create the smart home security frame.
     */
    public SmartHomeSecurityFrame() {
        // Initialize the component that are contained in the frame.
        initComponents();
        // Set the frame layout to be a Border Layout.
        setLayout(new BorderLayout());
        // Pack the frame content.
        pack();
        // Initialize by showing the main panel.
        showMainPanel();
        // Disallow the frame to be resized.
        setResizable(false);       
    }

    /**
     * The smart home security frame singleton instance.
     * @return the SmartHomeSecurityFrame instance.
     */
    public static SmartHomeSecurityFrame getInstance() {
        // Initialize the frame it has not been created.
        if (frame == null) {
            frame = new SmartHomeSecurityFrame();
        }
        
        // Return the frame.
        return frame;
    }
    
    /**
     * Allow the given component to replace the main content area.
     * @param component - The Component to replace the main content area.
     */
    public void replaceFramePanel(Component component) {
        // Hold a reference to the current component.
        currentComponent = component;
        // Refresh the view to display the content.
        refresh();        
    }
    
    /**
     * Refreshes the frame.
     */
    public void refresh() {
        // Remove all the components from the content pane.
        getContentPane().removeAll();        
        // Add the current component to the content pane.
        add(componentPanel(currentComponent));
        // Repaint the content pane.
        getContentPane().repaint();
        // Pack the frame to fit its content.
        pack();        
    }
    
    /**
     * Helper to add the component panel to the content pane. Adds the notification
     * banner if there are unread notifications.
     * @param component - The Component to replace the main content area.
     * @return 
     */
    private JPanel componentPanel(Component component) {
        // Create a container panel.
        JPanel container = new JPanel();
        // Set the layout of the container panel to a box layout.
        container.setLayout(new BoxLayout(container, BoxLayout.Y_AXIS));
        // Add the component to the continer panel.
        container.add(component);
        // Check if there are unread notifications.
        if (Notifications.getInstance().UnreadNotifications()) {
            // Add the notifications banner to the container panel.
            container.add(new NotificationBanner());   
        }
        
        // Return the container.
        return container;
    }

    /**
     * Display the main panel on the frame.
     */
    private void showMainPanel() {
        replaceFramePanel(new MainPanel());
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 332, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 354, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Load the devices from file.
        DeviceManager.loadDevices();                
        
        // Save the devices when the JVM shuts down.
        Runtime.getRuntime().addShutdownHook(new DeviceManager());
        
        // Establish connection to all devices.               
        DeviceSocketManager.getInstance().connectDevices();
        Runtime.getRuntime().addShutdownHook(DeviceSocketManager.getInstance());

        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            // Create and display the smart home security frame.
            public void run() {
                // Initialize the frame and mark it as visible.
                SmartHomeSecurityFrame.getInstance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
