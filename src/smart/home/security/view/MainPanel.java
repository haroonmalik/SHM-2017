/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smart.home.security.view;

import smart.home.security.model.Device;
import smart.home.security.model.Devices;
import smart.home.security.utilities.AudioManager;
import smart.home.security.utilities.DeviceSocketManager;

/**
 * The main panel view of the smart home security.
 * @author archana
 */
public class MainPanel extends javax.swing.JPanel {

    /**
     * The constructor for the main panel view.
     */
    public MainPanel() {
        // Initialize the components within the main panel view.
        initComponents();
        // Update the status of the devices (Armed or Disarmed).
        updateStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        armButton = new javax.swing.JButton();
        disarmButton = new javax.swing.JButton();
        enableButton = new javax.swing.JButton();
        disableButton = new javax.swing.JButton();
        statusLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SMART HOME SECURITY", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 14))); // NOI18N
        setToolTipText("");
        setPreferredSize(new java.awt.Dimension(408, 309));

        addButton.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        addButton.setText("Add Device");
        addButton.setToolTipText("Add a device");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        removeButton.setText("Remove Device");
        removeButton.setToolTipText("Remove a device");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        armButton.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        armButton.setText("Arm System");
        armButton.setToolTipText("Arm system");
        armButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                armButtonActionPerformed(evt);
            }
        });

        disarmButton.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        disarmButton.setText("Disarm System");
        disarmButton.setToolTipText("Disarm system");
        disarmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disarmButtonActionPerformed(evt);
            }
        });

        enableButton.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        enableButton.setText("Enable Device");
        enableButton.setToolTipText("Enable device");
        enableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableButtonActionPerformed(evt);
            }
        });

        disableButton.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        disableButton.setText("Disable Device");
        disableButton.setToolTipText("Disable a device");
        disableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disableButtonActionPerformed(evt);
            }
        });

        statusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        statusLabel.setText("Status");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(armButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(enableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(disarmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(disableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusLabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addGap(152, 152, 152)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton)
                    .addComponent(armButton)
                    .addComponent(enableButton))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeButton)
                    .addComponent(disarmButton)
                    .addComponent(disableButton))
                .addContainerGap(39, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Helper to get the smart home security frame. 
     * @return the SmartHomeSecurityFrame of this component.
     */
    private SmartHomeSecurityFrame getSmartHomeSecurityFrame() {
        return SmartHomeSecurityFrame.getInstance();
    }

    /**
     * The show add button view action performed. Launches the work flow to add
     * a device.
     * @param evt - The button action event. 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // Create the available devices panel.
        AvailableDevicesPanel availableDevicesPanel = new AvailableDevicesPanel();
        // Update the main content pane with the available devices panel.
        getSmartHomeSecurityFrame().replaceFramePanel(availableDevicesPanel);
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * The remove devices button view action performed. Launches the work flow
     * to remove an existing device.
     * @param evt - The button action event. 
     */
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // Create the remove device panel.
        RemoveDevicePanel removeDevicePanel = new RemoveDevicePanel();
        // Update the main content pane with the remove devices panel.
        getSmartHomeSecurityFrame().replaceFramePanel(removeDevicePanel);
    }//GEN-LAST:event_removeButtonActionPerformed

    /**
     * The arm system button action performed. When clicked, arm all the devices
     * and notify the user that the system has been armed.
     * @param evt - The button action event.  
     */
    private void armButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armButtonActionPerformed
        // Update the model to arm all devices.
        Devices.getInstance().armDevices();
        // Iterate through all the devices.
        for (Device device : Devices.getInstance().getDevices()) {
            // Send a message to the device to arm.
            DeviceSocketManager.getInstance().sendDeviceMessage(device);
        }
        
        // Update the status view.
        updateStatus();
        
        // Alert the user that the system is armed by playing an audio.
        AudioManager audioManager = new AudioManager();
        audioManager.playAudio(AudioManager.SYSTEM_ARMED);
    }//GEN-LAST:event_armButtonActionPerformed

    /**
     * The disarm system button action performed. When clicked, disarm all the
     * devices and notify the user that the system has been disarmed.
     * @param evt - The button action event.  
     */
    private void disarmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disarmButtonActionPerformed
        // Update the model to disarm all devices.
        Devices.getInstance().disarmDevices();
        // Iterate through all the devices.
        for (Device device : Devices.getInstance().getDevices()) {
            // Send a message to the device to diarm.
            DeviceSocketManager.getInstance().sendDeviceMessage(device);
        }

        // Update the status view.
        updateStatus();

        // Alert the user that the system is disarmed by playing an audio.
        AudioManager audioManager = new AudioManager();
        audioManager.playAudio(AudioManager.SYSTEM_DISARMED);
    }//GEN-LAST:event_disarmButtonActionPerformed

    /**
     * The show enable devices button action performed. Show the enable panel
     * when the button is clicked.
     * @param evt - The button action event. 
     */
    private void enableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableButtonActionPerformed
        // Create a new enable panel.
        EnablePanel enablePanel = new EnablePanel();
        // Update the main content pane with the enable panel.
        getSmartHomeSecurityFrame().replaceFramePanel(enablePanel);
    }//GEN-LAST:event_enableButtonActionPerformed

    /**
     * The show disable devices button action performed. Show the disable panel
     * when the button is clicked.
     * @param evt - The button action event.
     */
    private void disableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disableButtonActionPerformed
        // Create a new disable panel.
        DisablePanel disablePanel = new DisablePanel();
        // Update the main content pane with the disable panel.
        getSmartHomeSecurityFrame().replaceFramePanel(disablePanel);
    }//GEN-LAST:event_disableButtonActionPerformed

    /**
     * Update the status of the system. Sets the status to:
     * "Status: System Armed" - When the enabled devices are armed.
     * "Status: System Disarmed" - When the devices are not armed.
     */
    private void updateStatus() {
        // Determine if the devices are armed or disarmed.
        if (Devices.getInstance().armed()) {
            // Update the status label with the armed message.
            statusLabel.setText("Status: System Armed");
        } else {
            // Update the status label with the disarm message.
            statusLabel.setText("Status: System Disarmed");
        }
        // Enable/disable the arm button if the devices can be armed.
        armButton.setEnabled(Devices.getInstance().canArmDevices());
        // Enable/disable the disarm button if the devices can be disarmed.
        disarmButton.setEnabled(Devices.getInstance().canDisarmDevices());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton armButton;
    private javax.swing.JButton disableButton;
    private javax.swing.JButton disarmButton;
    private javax.swing.JButton enableButton;
    private javax.swing.JButton removeButton;
    public javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
