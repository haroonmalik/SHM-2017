package smart.home.security.view;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import smart.home.security.model.Notification;
import smart.home.security.model.Notifications;
import smart.home.security.utilities.NotificationsModel;

/**
 * Shows the notifications view with its details.
 * @author archana
 */
public class NotificationsPanel extends javax.swing.JPanel {

    /**
     * The constructor to create the notifications view.
     */
    public NotificationsPanel() {
        // Initialize the components of the notifications panel.
        initComponents();
        
        // Update the notifications table model.
        updateTableModel();
    }
    
    /**
     * Helper to get the smart home security frame. 
     * @return the SmartHomeSecurityFrame of this component.
     */
    private SmartHomeSecurityFrame getSmartHomeSecurityFrame() {
        return SmartHomeSecurityFrame.getInstance();
    }
    
    /**
     * Update the table model based on the notifications.
     */
    private void updateTableModel() {
        // Get all the notifications.
        List<Notification> notifications = Notifications.getInstance().getNotifications();
        // Create the table model with the notifications.
        DefaultTableModel model = NotificationsModel.defaultTableModel(notifications);
        // Set the model on the table.
        notificationsTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clearButton = new javax.swing.JButton();
        clearAllButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        notificationsTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Notifications"));

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        clearAllButton.setText("Clear All");
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });

        notificationsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ));
        jScrollPane2.setViewportView(notificationsTable);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearAllButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearAllButton)
                    .addComponent(clearButton)
                    .addComponent(backButton))
                .addContainerGap(15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The action to perform when the clear button is pressed. Remove the notification
     * from the selected index when clicked.
     * @param evt - The button action event.
     */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // Get the selected index in the table view.
        int selectedIndex = notificationsTable.getSelectedRow();
        // Validate the selected index.
        if (selectedIndex >= 0) {
            // Remove the notification from the selected index.
            Notifications.getInstance().removeNotification(selectedIndex);            
        }
        // Refresh the table view model.
        updateTableModel();
        
        // Repaint the table view.
        notificationsTable.repaint();
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * The action to perform when the clear all button is pressed. Remove all
     * the notifications from the list.
     * @param evt - The button action event.
     */
    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        // Remove the notifications from the model.
        Notifications.getInstance().removeNotifications();
        // Update the table view model.
        updateTableModel();
        // Repaint the table view panel.
        notificationsTable.repaint();
    }//GEN-LAST:event_clearAllButtonActionPerformed

    /**
     * The action to perform when the back button is pressed. Navigates back to
     * the main view.
     * @param evt - The button action event.
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // Mark that the notifications have been read.
        Notifications.getInstance().markNotificationsAsRead();
        // Navigate to the main view panel.
        getSmartHomeSecurityFrame().replaceFramePanel(new MainPanel());
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable notificationsTable;
    // End of variables declaration//GEN-END:variables
}
